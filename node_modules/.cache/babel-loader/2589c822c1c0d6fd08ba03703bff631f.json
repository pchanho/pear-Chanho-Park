{"ast":null,"code":"import { useState, useEffect } from \"react\";\nimport FormData from \"form-data\"; //Link to mongoDB backend server\n\nconst BASE_URL = \"https://info30005-pear.herokuapp.com\";\n/*!*-------------*/\n\n/* \tConversation */\n\n/*-------------*!*/\n\n/* retrieve conversation from backend \n*/\n\nfunction getConversations() {\n  const endpoint = BASE_URL + '/conversation/readAll';\n  console.log(getConversations);\n  return fetch(endpoint).then(res => res.json());\n}\n/* wrapper for get conversations \n*/\n\n\nexport function useConversations() {\n  const [loading, setLoading] = useState(true);\n  const [conversations, setConversations] = useState([]);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    getConversations().then(conversations => {\n      setConversations(conversations);\n      setLoading(false);\n    }).catch(e => {\n      console.log(e);\n      setError(e);\n      setLoading(false);\n    });\n  }, []);\n  return {\n    loading,\n    conversations,\n    error\n  };\n}\n/* add conversation to the database \n*/\n\nexport function addConversation(conversation) {\n  const {\n    topic,\n    category,\n    image\n  } = conversation;\n\n  if (!topic || !category) {\n    alert(\"must include all required fields\");\n    return;\n  }\n\n  if (image == undefined) {\n    alert(\"no image detected, default image used in place\");\n  }\n\n  const data = new FormData();\n  data.append('topicImage', image);\n  data.append('topic', topic);\n  data.append('category', category);\n  const endpoint = BASE_URL + `/conversation/create/`;\n  console.log(\"addConversation\");\n  return fetch(endpoint, {\n    method: \"POST\",\n    body: data\n  }).then(res => window.location.reload());\n}","map":{"version":3,"sources":["/Users/chanho/Desktop/Pear_Chanho_Park/src/api.js"],"names":["useState","useEffect","FormData","BASE_URL","getConversations","endpoint","console","log","fetch","then","res","json","useConversations","loading","setLoading","conversations","setConversations","error","setError","catch","e","addConversation","conversation","topic","category","image","alert","undefined","data","append","method","body","window","location","reload"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,QAAP,MAAqB,WAArB,C,CAEA;;AACA,MAAMC,QAAQ,GAAG,sCAAjB;AAGA;;AACA;;AACA;;AAEA;;;AAEA,SAASC,gBAAT,GAA4B;AACxB,QAAMC,QAAQ,GAAGF,QAAQ,GAAG,uBAA5B;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYH,gBAAZ;AACA,SAAOI,KAAK,CAACH,QAAD,CAAL,CAAgBI,IAAhB,CAAqBC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAA5B,CAAP;AACH;AAED;;;;AAEA,OAAO,SAASC,gBAAT,GAA4B;AAC/B,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACe,aAAD,EAAgBC,gBAAhB,IAAoChB,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACiB,KAAD,EAAQC,QAAR,IAAoBlB,QAAQ,CAAC,IAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZG,IAAAA,gBAAgB,GACXK,IADL,CACUM,aAAa,IAAI;AACnBC,MAAAA,gBAAgB,CAACD,aAAD,CAAhB;AACAD,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KAJL,EAKKK,KALL,CAKWC,CAAC,IAAI;AACRd,MAAAA,OAAO,CAACC,GAAR,CAAYa,CAAZ;AACAF,MAAAA,QAAQ,CAACE,CAAD,CAAR;AACAN,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KATL;AAUH,GAXQ,EAWN,EAXM,CAAT;AAaA,SAAO;AACHD,IAAAA,OADG;AAEHE,IAAAA,aAFG;AAGHE,IAAAA;AAHG,GAAP;AAKH;AAED;;;AAEA,OAAO,SAASI,eAAT,CAAyBC,YAAzB,EAAuC;AAC1C,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,QAAT;AAAmBC,IAAAA;AAAnB,MAA6BH,YAAnC;;AACA,MAAI,CAACC,KAAD,IAAU,CAACC,QAAf,EAAyB;AACrBE,IAAAA,KAAK,CAAC,kCAAD,CAAL;AACA;AACH;;AAED,MAAID,KAAK,IAAIE,SAAb,EAAuB;AACnBD,IAAAA,KAAK,CAAC,gDAAD,CAAL;AACH;;AAED,QAAME,IAAI,GAAG,IAAI1B,QAAJ,EAAb;AACA0B,EAAAA,IAAI,CAACC,MAAL,CAAY,YAAZ,EAA0BJ,KAA1B;AACAG,EAAAA,IAAI,CAACC,MAAL,CAAY,OAAZ,EAAqBN,KAArB;AACAK,EAAAA,IAAI,CAACC,MAAL,CAAY,UAAZ,EAAwBL,QAAxB;AAEA,QAAMnB,QAAQ,GAAGF,QAAQ,GAAI,uBAA7B;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AAEA,SAAOC,KAAK,CAACH,QAAD,EAAW;AACnByB,IAAAA,MAAM,EAAE,MADW;AAEnBC,IAAAA,IAAI,EAAEH;AAFa,GAAX,CAAL,CAGJnB,IAHI,CAGCC,GAAG,IAAIsB,MAAM,CAACC,QAAP,CAAgBC,MAAhB,EAHR,CAAP;AAIH","sourcesContent":["import { useState, useEffect } from \"react\";\nimport FormData from \"form-data\"\n\n//Link to mongoDB backend server\nconst BASE_URL = \"https://info30005-pear.herokuapp.com\";\n\n\n/*!*-------------*/\n/* \tConversation */\n/*-------------*!*/\n\n/* retrieve conversation from backend \n*/\nfunction getConversations() {\n    const endpoint = BASE_URL + '/conversation/readAll';\n    console.log(getConversations);\n    return fetch(endpoint).then(res => res.json());\n}\n\n/* wrapper for get conversations \n*/\nexport function useConversations() {\n    const [loading, setLoading] = useState(true);\n    const [conversations, setConversations] = useState([]);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        getConversations()\n            .then(conversations => {\n                setConversations(conversations);\n                setLoading(false);\n            })\n            .catch(e => {\n                console.log(e);\n                setError(e);\n                setLoading(false);\n            });\n    }, []);\n\n    return {\n        loading,\n        conversations,\n        error\n    };\n}\n\n/* add conversation to the database \n*/\nexport function addConversation(conversation) {\n    const { topic, category, image } = conversation;\n    if (!topic || !category) {\n        alert(\"must include all required fields\");\n        return;\n    }\n\n    if (image == undefined){\n        alert(\"no image detected, default image used in place\")\n    }\n\n    const data = new FormData();\n    data.append('topicImage', image);\n    data.append('topic', topic);\n    data.append('category', category);\n\n    const endpoint = BASE_URL + `/conversation/create/`;\n    console.log(\"addConversation\");\n    \n    return fetch(endpoint, {\n        method: \"POST\",\n        body: data\n    }).then(res => window.location.reload());\n}\n"]},"metadata":{},"sourceType":"module"}