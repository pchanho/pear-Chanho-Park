{"ast":null,"code":"/*TODO\n*  1. Login feature\n*  2. */\nimport { useState, useEffect } from \"react\";\nimport FormData from \"form-data\";\nimport axios from 'axios'; //Temporary base url before update heroku server\n\nconst BASE_URL = \"https://info30005-pear.herokuapp.com\";\n/* retrieve conversation from backend \n*/\n\nfunction getConversations() {\n  const endpoint = BASE_URL + '/conversation/readAll';\n  console.log(getConversations);\n  return fetch(endpoint).then(res => res.json());\n}\n/* wrapper for get conversations \n*/\n\n\nexport function useConversations() {\n  const [loading, setLoading] = useState(true);\n  const [conversations, setConversations] = useState([]);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    getConversations().then(conversations => {\n      setConversations(conversations);\n      setLoading(false);\n    }).catch(e => {\n      console.log(e);\n      setError(e);\n      setLoading(false);\n    });\n  }, []);\n  return {\n    loading,\n    conversations,\n    error\n  };\n}\n/* add conversation to the database \n*/\n\nexport function addConversation(conversation) {\n  const {\n    topic,\n    category,\n    image\n  } = conversation;\n\n  if (!topic || !category) {\n    alert(\"must include all required fields\");\n    return;\n  }\n\n  if (image == undefined) {\n    alert(\"no image detected, default image used in place\");\n  }\n\n  const data = new FormData();\n  data.append('topicImage', image);\n  data.append('topic', topic);\n  data.append('category', category);\n  const endpoint = BASE_URL + `/conversation/create/`;\n  console.log(\"addConversation\");\n  return fetch(endpoint, {\n    method: \"POST\",\n    body: data\n  }).then(res => window.location.reload());\n}\n/* add account to the database \n*/\n\nexport function addAccount(account) {\n  const {\n    firstName,\n    lastName,\n    email,\n    birthday,\n    password\n  } = account;\n\n  if (!firstName || !lastName || !email || !birthday || !password) {\n    alert(\"must include all fields\");\n    return null;\n  }\n\n  console.log({\n    firstName,\n    lastName\n  });\n  const endpoint = BASE_URL + `/account/create/`;\n  console.log(\"addAccount\");\n  return new Promise(function (resolve) {\n    axios({\n      method: 'post',\n      url: endpoint,\n      data: {\n        firstName,\n        lastName,\n        email,\n        birthday,\n        password\n      }\n    }).then(function (json) {\n      resolve(json);\n    });\n  });\n}\n/* attempts to log into the account \n*/\n\nexport async function accountLogin(login) {\n  const {\n    email,\n    password\n  } = login;\n\n  if (!email || !password) {\n    alert(\"must include all fields\");\n    return null;\n  }\n\n  console.log({\n    email,\n    password\n  });\n  const endpoint = BASE_URL + `/account/login/`;\n  console.log(\"login\"); //returns the status of the login (true, false)\n\n  return new Promise(function (resolve) {\n    axios({\n      method: 'post',\n      url: endpoint,\n      data: {\n        email,\n        password\n      }\n    }).then(function (json) {\n      resolve(json);\n    });\n  });\n}\n/*----------------\n Message API\n----------------*/\n\n/* add message to the database \n*/\n\nexport function addMessage(message) {\n  const {\n    conversationId,\n    senderId,\n    text,\n    image,\n    video\n  } = message;\n\n  if (!conversationId || !senderId || !text) {\n    alert(\"must include all fields\");\n    return;\n  }\n\n  const endpoint = BASE_URL + `/message/create/`;\n  return fetch(endpoint, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      conversationId,\n      senderId,\n      text,\n      image,\n      video\n    })\n  }).then(res => window.location.reload());\n}\n/* gets messages based on conversation id \n*/\n\nfunction getSpecific(data) {\n  const conversationId = data.conversationId;\n\n  if (!conversationId) {\n    alert(\"must include all fields\");\n    return;\n  }\n\n  const endpoint = BASE_URL + '/message/readSpecific';\n  return fetch(endpoint, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      conversationId\n    })\n  }).then(res => res.json());\n}\n/* gets all messages from database \n*/\n\n\nfunction getMessages() {\n  const endpoint = BASE_URL + '/message/readAll';\n  console.log(\"getMessages\");\n  return fetch(endpoint).then(res => res.json());\n}\n/* wrapper for get messages \n*/\n\n\nexport function useMessages(data) {\n  const [loading, setLoading] = useState(true);\n  const [messages, setMessages] = useState([]);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    getSpecific(data).then(messages => {\n      setMessages(messages);\n      setLoading(false);\n    }).catch(e => {\n      console.log(e);\n      setError(e);\n      setLoading(false);\n    });\n  }, []);\n  return {\n    loading,\n    messages,\n    error\n  };\n}","map":{"version":3,"sources":["/Users/chanho/Documents/GitHub/info30005-pear-frontend/src/api.js"],"names":["useState","useEffect","FormData","axios","BASE_URL","getConversations","endpoint","console","log","fetch","then","res","json","useConversations","loading","setLoading","conversations","setConversations","error","setError","catch","e","addConversation","conversation","topic","category","image","alert","undefined","data","append","method","body","window","location","reload","addAccount","account","firstName","lastName","email","birthday","password","Promise","resolve","url","accountLogin","login","addMessage","message","conversationId","senderId","text","video","headers","JSON","stringify","getSpecific","getMessages","useMessages","messages","setMessages"],"mappings":"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","sourcesContent":["/*TODO\n*  1. Login feature\n*  2. */\n\nimport { useState, useEffect } from \"react\";\nimport FormData from \"form-data\"\nimport axios from 'axios';\n\n//Temporary base url before update heroku server\nconst BASE_URL = \"https://info30005-pear.herokuapp.com\";\n\n/* retrieve conversation from backend \n*/\nfunction getConversations() {\n    const endpoint = BASE_URL + '/conversation/readAll';\n    console.log(getConversations);\n    return fetch(endpoint).then(res => res.json());\n}\n\n/* wrapper for get conversations \n*/\nexport function useConversations() {\n    const [loading, setLoading] = useState(true);\n    const [conversations, setConversations] = useState([]);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        getConversations()\n            .then(conversations => {\n                setConversations(conversations);\n                setLoading(false);\n            })\n            .catch(e => {\n                console.log(e);\n                setError(e);\n                setLoading(false);\n            });\n    }, []);\n\n    return {\n        loading,\n        conversations,\n        error\n    };\n}\n\n/* add conversation to the database \n*/\nexport function addConversation(conversation) {\n    const { topic, category, image } = conversation;\n    if (!topic || !category) {\n        alert(\"must include all required fields\");\n        return;\n    }\n\n    if (image == undefined){\n        alert(\"no image detected, default image used in place\")\n    }\n\n    const data = new FormData();\n    data.append('topicImage', image);\n    data.append('topic', topic);\n    data.append('category', category);\n\n    const endpoint = BASE_URL + `/conversation/create/`;\n    console.log(\"addConversation\");\n    \n    return fetch(endpoint, {\n        method: \"POST\",\n        body: data\n    }).then(res => window.location.reload());\n}\n\n/* add account to the database \n*/ \nexport function addAccount(account) {\n    const { firstName, lastName, email, birthday, password } = account;\n    if (!firstName || !lastName || !email || !birthday || !password) {\n        alert(\"must include all fields\");\n        return null;\n    }\n\n    console.log({\n        firstName,\n        lastName\n    });\n\n    const endpoint = BASE_URL + `/account/create/`;\n    console.log(\"addAccount\");\n\n    return new Promise( function(resolve) {\n        axios({\n            method: 'post',\n            url: endpoint,\n            data: {\n                firstName,\n                lastName,\n                email,\n                birthday,\n                password\n            }\n        }).then(function(json) {\n            resolve(json);\n        });\n    });\n\n}\n\n/* attempts to log into the account \n*/\nexport async function accountLogin(login) {\n    const { email, password } = login;\n    if (!email || !password) {\n        alert(\"must include all fields\");\n        return null;\n    }\n\n    console.log({\n        email,\n        password\n    });\n\n    const endpoint = BASE_URL + `/account/login/`;\n    console.log(\"login\");\n\n    //returns the status of the login (true, false)\n   return new Promise( function(resolve) {\n        axios({\n            method: 'post',\n            url: endpoint,\n            data: {\n                email,\n                password\n            }\n        }).then(function(json) {\n            resolve(json);\n        });\n    });\n}\n\n\n\n/*----------------\n Message API\n----------------*/\n\n/* add message to the database \n*/\nexport function addMessage(message) {\n    const {conversationId, senderId, text, image, video } = message;\n    if (!conversationId || !senderId || !text) {\n        alert(\"must include all fields\");\n        return;\n    }\n\n\n    const endpoint = BASE_URL + `/message/create/`;\n    return fetch(endpoint, {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            conversationId,\n            senderId,\n            text,\n            image,\n            video\n        })\n    }).then(res => window.location.reload());\n}\n\n/* gets messages based on conversation id \n*/\nfunction getSpecific(data) {\n\n\n    const conversationId  = data.conversationId;\n    if (!conversationId) {\n        alert(\"must include all fields\");\n        return;\n    }\n\n    const endpoint = BASE_URL + '/message/readSpecific';\n    return fetch(endpoint, {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            conversationId\n        })\n    }).then(res => res.json());\n}\n\n/* gets all messages from database \n*/\nfunction getMessages() {\n    const endpoint = BASE_URL + '/message/readAll';\n    console.log(\"getMessages\");\n    return fetch(endpoint).then(res => res.json());\n}\n\n/* wrapper for get messages \n*/\nexport function useMessages(data) {\n    const [loading, setLoading] = useState(true);\n    const [messages, setMessages] = useState([]);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        getSpecific(data)\n            .then(messages => {\n                setMessages(messages);\n                setLoading(false);\n            })\n            .catch(e => {\n                console.log(e);\n                setError(e);\n                setLoading(false);\n            });\n    }, []);\n\n    return {\n        loading,\n        messages,\n        error\n    };\n}\n"]},"metadata":{},"sourceType":"module"}